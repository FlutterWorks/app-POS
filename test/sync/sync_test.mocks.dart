// Mocks generated by Mockito 5.4.2 from annotations
// in sultanpos/test/sync/sync_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:sultanpos/http/httpapi.dart' as _i6;
import 'package:sultanpos/http/websocket/message.pb.dart' as _i9;
import 'package:sultanpos/http/websocket/websocket.dart' as _i8;
import 'package:sultanpos/model/auth.dart' as _i2;
import 'package:sultanpos/model/base.dart' as _i4;
import 'package:sultanpos/model/listresult.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginResponse_0 extends _i1.SmartFake implements _i2.LoginResponse {
  _FakeLoginResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListResult_2<T1 extends _i4.BaseModel> extends _i1.SmartFake
    implements _i5.ListResult<T1> {
  _FakeListResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_3<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IHttpAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHttpAPI extends _i1.Mock implements _i6.IHttpAPI {
  MockIHttpAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic setLogin(_i2.LoginResponse? login) =>
      super.noSuchMethod(Invocation.method(
        #setLogin,
        [login],
      ));
  @override
  bool isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i3.Future<_i2.LoginResponse> loginWithUsernamePassword(
          _i2.LoginUsernamePasswordRequest? req) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithUsernamePassword,
          [req],
        ),
        returnValue: _i3.Future<_i2.LoginResponse>.value(_FakeLoginResponse_0(
          this,
          Invocation.method(
            #loginWithUsernamePassword,
            [req],
          ),
        )),
      ) as _i3.Future<_i2.LoginResponse>);
  @override
  _i3.Future<dynamic> logout(String? refreshToken) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [refreshToken],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  _i3.Future<T> insert<T>(
    _i4.BaseModel? data, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [data],
          {#path: path},
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #insert,
                  [data],
                  {#path: path},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #insert,
                [data],
                {#path: path},
              ),
            ),
      ) as _i3.Future<T>);
  @override
  _i3.Future<T> update<T>(
    _i4.BaseModel? data,
    int? id, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            data,
            id,
          ],
          {#path: path},
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #update,
                  [
                    data,
                    id,
                  ],
                  {#path: path},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #update,
                [
                  data,
                  id,
                ],
                {#path: path},
              ),
            ),
      ) as _i3.Future<T>);
  @override
  _i3.Future<T> getOne<T>(
    String? path, {
    required T Function(Map<String, dynamic>)? fromJsonFunc,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOne,
          [path],
          {#fromJsonFunc: fromJsonFunc},
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #getOne,
                  [path],
                  {#fromJsonFunc: fromJsonFunc},
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #getOne,
                [path],
                {#fromJsonFunc: fromJsonFunc},
              ),
            ),
      ) as _i3.Future<T>);
  @override
  _i3.Future<T> post<T>(
    _i4.BaseModel? data,
    String? path, {
    bool? skipAuth = false,
    bool? skipCompanyId = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            data,
            path,
          ],
          {
            #skipAuth: skipAuth,
            #skipCompanyId: skipCompanyId,
          },
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #post,
                  [
                    data,
                    path,
                  ],
                  {
                    #skipAuth: skipAuth,
                    #skipCompanyId: skipCompanyId,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #post,
                [
                  data,
                  path,
                ],
                {
                  #skipAuth: skipAuth,
                  #skipCompanyId: skipCompanyId,
                },
              ),
            ),
      ) as _i3.Future<T>);
  @override
  _i3.Future<T> put<T>(
    _i4.BaseModel? data,
    String? path, {
    bool? skipAuth = false,
    bool? skipCompanyId = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            data,
            path,
          ],
          {
            #skipAuth: skipAuth,
            #skipCompanyId: skipCompanyId,
          },
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #put,
                  [
                    data,
                    path,
                  ],
                  {
                    #skipAuth: skipAuth,
                    #skipCompanyId: skipCompanyId,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #put,
                [
                  data,
                  path,
                ],
                {
                  #skipAuth: skipAuth,
                  #skipCompanyId: skipCompanyId,
                },
              ),
            ),
      ) as _i3.Future<T>);
  @override
  _i3.Future<dynamic> delete(
    String? path, {
    bool? skipAuth = false,
    bool? skipCompanyId = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #skipAuth: skipAuth,
            #skipCompanyId: skipCompanyId,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  _i3.Future<T> get<T>(
    String? path, {
    required T Function(Map<String, dynamic>)? fromJsonFunc,
    bool? skipAuth = false,
    bool? skipCompanyId = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #fromJsonFunc: fromJsonFunc,
            #skipAuth: skipAuth,
            #skipCompanyId: skipCompanyId,
          },
        ),
        returnValue: _i7.ifNotNull(
              _i7.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #fromJsonFunc: fromJsonFunc,
                    #skipAuth: skipAuth,
                    #skipCompanyId: skipCompanyId,
                  },
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #get,
                [path],
                {
                  #fromJsonFunc: fromJsonFunc,
                  #skipAuth: skipAuth,
                  #skipCompanyId: skipCompanyId,
                },
              ),
            ),
      ) as _i3.Future<T>);
  @override
  _i3.Future<_i5.ListResult<T>> query<T extends _i4.BaseModel>(
    String? path, {
    required T Function(Map<String, dynamic>)? fromJsonFunc,
    required dynamic limit,
    required dynamic offset,
    bool? skipAuth = false,
    bool? skipCompanyId = false,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [path],
          {
            #fromJsonFunc: fromJsonFunc,
            #limit: limit,
            #offset: offset,
            #skipAuth: skipAuth,
            #skipCompanyId: skipCompanyId,
            #queryParameters: queryParameters,
          },
        ),
        returnValue: _i3.Future<_i5.ListResult<T>>.value(_FakeListResult_2<T>(
          this,
          Invocation.method(
            #query,
            [path],
            {
              #fromJsonFunc: fromJsonFunc,
              #limit: limit,
              #offset: offset,
              #skipAuth: skipAuth,
              #skipCompanyId: skipCompanyId,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i3.Future<_i5.ListResult<T>>);
  @override
  _i3.Future<dynamic> querySync(
    String? tableName,
    DateTime? date,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #querySync,
          [
            tableName,
            date,
            limit,
          ],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
  @override
  _i3.Future<Map<String, dynamic>> syncUp(
    String? tableName,
    Map<String, dynamic>? json,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncUp,
          [
            tableName,
            json,
          ],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [IWebSocketTransport].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWebSocketTransport extends _i1.Mock
    implements _i8.IWebSocketTransport {
  MockIWebSocketTransport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.StreamSubscription<_i9.Message> listen(
    dynamic Function(_i9.Message)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<_i9.Message>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i3.StreamSubscription<_i9.Message>);
  @override
  dynamic send(_i9.Message? msg) => super.noSuchMethod(Invocation.method(
        #send,
        [msg],
      ));
}
